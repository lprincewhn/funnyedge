<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda@Edge 和 CloudFront Function on Funny Edge Workshop</title><link>http://funnyedge.svhw.tech/60_customized/</link><description>Recent content in Lambda@Edge 和 CloudFront Function on Funny Edge Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Apr 2022 14:13:47 +0800</lastBuildDate><atom:link href="http://funnyedge.svhw.tech/60_customized/index.xml" rel="self" type="application/rss+xml"/><item><title>根据客户端所在国家选择源站</title><link>http://funnyedge.svhw.tech/60_customized/10_multi_origin/</link><pubDate>Tue, 12 Apr 2022 14:22:31 +0800</pubDate><guid>http://funnyedge.svhw.tech/60_customized/10_multi_origin/</guid><description>Lambda@Edge是Amazon CloudFront的一个功能，它可让您在靠近应用程序用户的地方运行代码，从而提高性能，降低延迟。使用 Lambda@Edge，您无需在全球多个地方预置或管理基础设施。您只需按使用的计算时间付费——代码未运行时不产生费用。
使用Lambda@Edge，您可以将Web应用程序分布在全球并提高它们的性能（并且无需管理任何服务器），从而丰富您的Web应用程序。Lambda@Edge根据Amazon CloudFront内容分发网络(CDN)生成的事件运行代码。您只需将代码上传到AWS Lambda，后者将在靠近最终用户的AWS站点完成运行和扩展代码所需的一切操作，从而实现高可用性。
Lambda@Edge允许您运行Node.js和Python函数来自定义CloudFront提供的内容，从而在更靠近查看器的AWS位置执行函数。这些函数在不调配或管理服务器的情况下运行，以响应CloudFront事件。您可以在以下时间点使用Lambda函数来更改CloudFront请求和响应：
在CloudFront收到查看器的请求时（查看器请求） 在CloudFront将请求转发到源之前（源请求） 在CloudFront收到来自源的响应之后（源响应） 在CloudFront将响应转发到查看器之前（查看器响应） 创建Lambda@Edge函数 1.1 创建策略
# 定义角色信任策略文档：该策略将用于创建一个角色，并且允许Lambda及Lambda@Edge切换至该角色 cat &amp;lt;&amp;lt;EoF &amp;gt; lambdaedge-assume-role-policy.json { &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: { &amp;quot;Service&amp;quot;: [ &amp;quot;edgelambda.amazonaws.com&amp;quot;, &amp;quot;lambda.amazonaws.com&amp;quot; ] }, &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot; } ] } EoF # 创建角色并将其ARN保存在环境变量 ROLE_NAME=lambda-edge-multi-origin-role ROLE_ARN=$(aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://lambdaedge-assume-role-policy.json --query Role.Arn --no-cli-pager --output text) echo $ROLE_ARN # 定义权限策略文档：该策略将允许上述角色往所有区域的cloudwatch写入日志 cat &amp;lt;&amp;lt;EoF &amp;gt; lambdaedge-write-cloudwatch-log-policy.json { &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Action&amp;quot;: [ &amp;quot;logs:CreateLogGroup&amp;quot;, &amp;quot;logs:CreateLogStream&amp;quot;, &amp;quot;logs:PutLogEvents&amp;quot; ], &amp;quot;Resource&amp;quot;: [ &amp;quot;arn:aws:logs:*:*:*&amp;quot; ] } ] } EoF # 创建策略并将其ARN保存在环境变量 POLICY_ARN=$(aws iam create-policy --policy-name LambdaEdgeWriteCloudWatchLogPolicy --policy-document file://lambdaedge-write-cloudwatch-log-policy.</description></item></channel></rss>